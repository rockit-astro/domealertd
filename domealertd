#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import datetime
import threading
import Pyro4
from rockit.domealert import Config, DigitalSensorsWatcher, RJ11SensorsWatcher, SwitchSensorsWatcher


class DomeAlertDaemon:
    def __init__(self, config):
        self._config = config

        self._lock = threading.Lock()
        self._last_measurement_date = None
        self._last_measurement = None

        self._digital_sensors = DigitalSensorsWatcher(config)
        self._rj11_sensors = RJ11SensorsWatcher(config.rj11_sensors, config.sensor_poll_rate,
                                                config.sensor_median_samples, config.sensor_timeout)
        self._switch_sensors = SwitchSensorsWatcher(config.switch_sensors)

        self._sensor_labels = {s['id']: s for s in self._config.rj11_sensors}
        self._sensor_labels.update({s['id']: s for s in self._config.switch_sensors})

    @Pyro4.expose
    def last_measurement(self):
        """
        Query the latest valid measurement.
        """
        data = {
            'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
        }

        self._digital_sensors.export_measurements(data)
        self._rj11_sensors.export_measurements(data)
        self._switch_sensors.export_measurements(data)

        return data

    @Pyro4.expose
    def measurement_sensors(self):
        """Returns a dictionary of sensor definitions"""
        return self._sensor_labels

    @Pyro4.expose
    def get_relay(self):
        return self._switch_sensors.get_relay()

    @Pyro4.expose
    def set_relay(self, enabled):
        self._switch_sensors.set_relay(enabled)
        return True


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Dome Alert Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    _config = Config(args.config)

    Pyro4.config.DETAILED_TRACEBACK = True
    Pyro4.config.REQUIRE_EXPOSE = True

    pyro = Pyro4.Daemon(host=_config.ip, port=_config.port)
    uri = pyro.register(DomeAlertDaemon(_config), objectId=_config.name)

    print(f'{datetime.datetime.utcnow()} MESSAGE: Starting daemon {uri}')
    pyro.requestLoop()
    print(f'{datetime.datetime.utcnow()} MESSAGE: Exiting daemon {uri}')
